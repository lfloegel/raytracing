from hit point P, compute surface coordinates (u,v) 
    use to index into procedural solid texture 
    can read in image and use 2d (u,v) texture coordinates to index into image 
direct way to use scaled (u,v) in image: round u and v to integers, and use that as (i,j) pixels 
    awkward as don't want to have to change code when chnagingimage resolution 
most universal unofficial standards: use texture coordinates instead of image pixel coordinates 
    some form of fractional position in image 
    i.e. for pixel (i,j) in Nx by Ny image, image texture position: 
            u = i / (N_x - i) 
            v = j / (N_y - j) 

need to make texture class that holds an image 
stb_image(): reads image into big array of unsigned char 
    packed RGBs with each component in range [0, 255] black to full white 

rtw_stb_image.h: deals with compilers warnings 
    assumes copied stb_image.h into folder called external 

htitable_list earth(): read image to file and then assign it a diffuse material 
power of all colors being textures: can assign any kind of texture to lambertain material, and lambertian doesn't 
need to be aware of it 