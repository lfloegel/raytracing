abstract material class: encapsulates behavior 
    1. produces a scatter ray or say it absorbed the ray 
    2. if scattered, say how much ray should be attenuated or reduced 

hit_record used to avoid a bunch of arguments to allow whatever stuff be put in it 
hittables and materials need to know one another 
    alert compiler pointer is to a class 
material tells how ray interacts wtith surface 
hit_record: stores a bunch of arguments that can be sent as a group 
wehn ray hits surface, material pointer in hit_record set to point at material pointer sphere given when set up in 
main() at start 
    when ray_color() gets hit_record, it can call member functions of material pointer to find out what ray, if any, is 
    scattered 
        must have reference to the material for sphere class to return within hit_record 

lambertian diffuse: can ether scatter always and attenuate by its reflectance R, scatter with no attenuation but absorb 
the fraction 1 - R of the rays, or a mix of both 

ray not randomly scattered for smooth metals 
    math is key for reflectance 
        reflected ray direction: v + 2b 
        n: unit vector 
        v: may not be a unit vector 
        length of b = v * n 
        *: dot product 
        as v points in, need a minus sign to reflect in upwards direction 

fuzzy reflection: can randomize reflected direction by using small sphere and choosing new endpoint S for ray 
    bigger the sphere, fuzzier the reflections 
    suggests adding a fuzziness parameter that is the radius of the sphere 
        size of fuzziness = raidus of reflected sphere on metal sphere 
        so zero is no pertubation 
        catch: may scatter below surface for big spheres or grazing rays 
            just have surface absorb those 

if (world.hit(r, 0.001, infinity, rec)) { //if intersects with hittable object 
                                              //ignore hits really close to zero to rid of shadow acne problem 
        //point3 target = rec.p + rec.normal + random_unit_vector(); //generates random direction 
        point3 target = rec.p + random_in_hemisphere(rec.normal); //alternative correct ideal Lambertian diffuse 
        return 0.5 * ray_color(ray(rec.p, target - rec.p), world, depth-1); //recursive as keeps going until fails to hit anything 
    }