equation of sphere centered at orign with radius R: x^2 + y^2 + z^2 = R^2 
(x, y, z) =: on sphere 
(x, y, z) <: inside sphere 
(x, y, z) >: outside sphere 

* = dot product 

almost always want formulas to be in vector form so all x, y, z computations under hood in vec3 class 

sphere center at (Cx, Cy, Cz): (x- Cx)^2 + (y - Cy)^2 + (z - Cz)^2 = R^2 
vector from center C to point P: (P - C) 
    (P - C) * (P - C) = (x - Cx)^2 + (y - Cy)^2 + (z - Cz)^2 
equation of sphere in vector form: (P - C) * (P - C) = r^2 
    any point P that satisfies the equation is on sphere 
find if ray hits sphere, find any t that this is true: 
    (P(t) - C) * (P(t) - C) = r^2 to (A + tb - C) * (A + tb - C) = r^2 
    A^2 + Atb - AC + Atb + t^2b*b - Ctb - CA - Ctb - C^2 - r^2 = 0 
    A^2 + 2Atb + t^2b*b - 2Ctb - C^2 - r^2 = 0 
    t^2b*b + 2tb (A - C) + (A - C) * (A - C) - r^2 = 0 
    vectors and r constant and known 
    t: unknown, discriminant 
    square root +: two real solutions 
        passes through spehere 
    square root 0: one real solution 
        passes through edge of sphere 
    square root -: zero real solutions 
        does not pass sphere 

quadratic equation where x = t 
a = t^2b*b 
b = 2tb (A - C) 
c = (A - C) * (A - C) - r^2 
discriminant tells number of solutions: b^2 - 4ac 



#include "color.h" 
#include "ray.h" 
#include "vec3.h" 

#include <iostream> 

bool hit_sphere(const point3& center, double radius, const ray& r) {
    vec3 oc = r.origin() - center; //find origin of sphere 
    auto a = dot(r.direction(), r.direction()); //b * b 
    auto b = 2.0 * dot(oc, r.direction()); //2((A - C) * b) 
    auto c = dot(oc, oc) - radius*radius; //(A - C) * (A - C) - r^2 = 0 
    auto discriminant = b*b - 4*a*c; //discriminant where t unknown 
    return (discriminant > 0); //if greater than zero inside of sphere t = discriminant                             3r 3
}

//linearly blends 
color ray_color(const ray& r) { 
    if (hit_sphere(point3(0,0,-1), 0.5, r)) //sphere placed at -1 on z axis 
        return color(1, 0, 0); //color pixel red 
    vec3 unit_direction = unit_vector(r.direction()); //unit vector 
    auto t = 0.5*(unit_direction.y() + 1.0);
    return (1.0-t)*color(1.0, 1.0, 1.0) + t*color(0.5, 0.7, 1.0);
} 

int main() {

    // Image

    const auto aspect_ratio = 16.0 / 9.0; //16:9 ratio 
    const int image_width = 400;
    const int image_height = static_cast<int>(image_width / aspect_ratio); //height match ratio 

    // Camera

    auto viewport_height = 2.0;
    auto viewport_width = aspect_ratio * viewport_height;
    auto focal_length = 1.0; //distance 

    auto origin = point3(0, 0, 0); //position of camera 
    auto horizontal = vec3(viewport_width, 0, 0);
    auto vertical = vec3(0, viewport_height, 0);
    auto lower_left_corner = origin - horizontal/2 - vertical/2 - vec3(0, 0, focal_length);

    // Render

    std::cout << "P3\n" << image_width << ' ' << image_height << "\n255\n";

    for (int j = image_height-1; j >= 0; --j) { //beginning from top to bottom 
        std::cerr << "\rScanlines remaining: " << j << ' ' << std::flush;
        for (int i = 0; i < image_width; ++i) { //beginning from left to right  
            auto u = double(i) / (image_width-1); //colors range from 0 to 1 
            auto v = double(j) / (image_height-1);
            ray r(origin, lower_left_corner + u*horizontal + v*vertical - origin);
            color pixel_color = ray_color(r);
            write_color(std::cout, pixel_color); 
        }
    } 

    std::cerr << "\nDone.\n"; 
}